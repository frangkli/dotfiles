#!/bin/bash
# This script will compile or run another finishing operation on a document. I
# have this script run via vim.

file=$(readlink -f "$1")
dir=$(dirname "$file")
base="${file%.*}"

cd "$dir" || exit

textype() { \
    command="pdflatex -shell-escape"
    ( sed 5q "$file" | grep -i -q 'xelatex' ) && command="xelatex"
    $command --output-directory="$dir" "$base" &&
    grep -i addbibresource "$file" >/dev/null &&
    biber --input-directory "$dir" "$base" &&
    $command --output-directory="$dir" "$base" &&
    $command --output-directory="$dir" "$base"
}

case "$file" in
    *\.ms) refer -PS -e "$file" | groff -me -ms -kejpt -T pdf > "$base".pdf ;;
    *\.mom) refer -PS -e "$file" | groff -mom -kejpt -T pdf > "$base".pdf ;;
    *\.rmd) echo "require(rmarkdown); render('$file', output_format = 'pdf_document')" | R -q --vanilla ;;
    *\.tex) textype "$file" ;;
    *\.md) pandoc "$file" --pdf-engine=xelatex --listings --number-sections -o "$base".pdf ;;
    *config.h) sudo make install ;;
    *\.c) gcc -std=c18 -Wall -Wextra -Werror -Wno-long-long -Wno-unused-parameter -Wno-unused-variable -lm "$file" -o "$base" && "$base" ;;
    # *\.cpp) mkdir -p "$dir/.out" && g++ "$file" -std=c++17 -O2 -Wall -Wextra -Wshadow -Wconversion -Wfloat-equal -Wduplicated-cond -Wlogical-op -Werror -Wno-long-long -Wno-unused-parameter -Wno-unused-variable -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG -g -o ".out/$(echo $base | sed 's/.*\///')" && ".out/$(echo $base | sed 's/.*\///')";;
    # g++ -O1 -g -fsanitize=address -fno-omit-frame-pointer
    #            -fsanitize=thread
    #            -fsanitize=undefined -fsanitize=nullabilit
    *\.cpp) mkdir -p "$dir/.out" && g++ "$file" -std=c++17 -O2 -Wall -Wextra -Wshadow -Wconversion -Wfloat-equal -Wduplicated-cond -Wlogical-op -Werror -Wno-long-long -Wno-unused-parameter -Wno-unused-variable -o ".out/$(echo $base | sed 's/.*\///')" && ".out/$(echo $base | sed 's/.*\///')";;
    *\.rs) rustc "$file" && "$base";;
    *\.py) python3 "$file" ;;
    *\.go) go run "$file" ;;
    *\.java) javac "$file"  && java "${1%.*}" ;;
    *\.asm) nasm -f macho64 -o "$base".o "$file" && ld -macosx_version_min 10.7.0 -o "$base" "$base".o ;;
esac
